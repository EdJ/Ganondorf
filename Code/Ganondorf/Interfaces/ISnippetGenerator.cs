// --------------------------------------------------------------------------------------------------------------------
// <copyright file="ISnippetGenerator.cs" company="SigmoidFx">
//   Copyright Ed 2012.
// </copyright>
// --------------------------------------------------------------------------------------------------------------------

namespace Ganondorf.Interfaces
{
    using System;
    using System.Reflection;
    using System.Reflection.Emit;

    /// <summary>
    ///   Abstracts the ILGenerator for testing purposes.
    /// </summary>
    public interface ISnippetGenerator
    {
        #region Public Methods

        /// <summary>
        /// Calls a method attached to a specific type.
        /// </summary>
        /// <param name="containingType">
        /// The type the method is attached to.
        /// </param>
        /// <param name="methodInfo">
        /// The method to call.
        /// </param>
        void CallMethod(Type containingType, MethodInfo methodInfo);

        /// <summary>
        /// Calls a method.
        /// </summary>
        /// <param name="methodInfo">
        /// The method to call.
        /// </param>
        /// <param name="virtualCall">
        /// Whether the method call should be virtual.
        /// </param>
        void CallMethod(MethodInfo methodInfo, bool virtualCall);

        /// <summary>
        /// Declares a new local variable of a specific type.
        /// </summary>
        /// <param name="toType">
        /// The type of the new variable.
        /// </param>
        void DeclareLocal(Type toType);

        /// <summary>
        ///   Declares a new method, should override a previous method if called (the method will not be valid until finalise).
        /// </summary>
        /// <param name = "toType">The type the method returns.</param>
        /// <param name = "fromType">The type of the method's parameter.</param>
        /// <param name = "methodNamePrefix">The prefix for the method name (the suffix is the toType.Name)</param>
        void DeclareMethod(Type toType, Type fromType, string methodNamePrefix);

        /// <summary>
        /// Declares local variables to be used when dealing with primitives.
        /// </summary>
        /// <returns>
        /// The number of variables declared.
        /// </returns>
        int DeclarePrimitiveContainers();

        /// <summary>
        /// Gets the current generated method.
        /// </summary>
        /// <returns>
        /// A DynamicMethod representing the method generated by the ISnippetGenerator.
        /// </returns>
        DynamicMethod GetGeneratedMethod();

        /// <summary>
        /// Instantiates a new instance of a specific type.
        /// </summary>
        /// <param name="typeToInstantiate">
        /// The type to instantiate.
        /// </param>
        /// <param name="objectLocation">
        /// The local variable location to instantiate the object to.
        /// </param>
        void InstantiateType(Type typeToInstantiate, int objectLocation);

        /// <summary>
        /// Loads a method argument onto the stack.
        /// </summary>
        /// <param name="argumentNumber">
        /// The argument number to load.
        /// </param>
        void LoadArgument(int argumentNumber);

        /// <summary>
        /// Loads a reference to an instance of a specific type onto the stack.
        /// </summary>
        /// <param name="toLoadLocation">
        /// The location to load from.
        /// </param>
        /// <param name="instanceType">
        /// The type of the instance to load the reference to.
        /// </param>
        void LoadInstanceReference(int toLoadLocation, Type instanceType);

        /// <summary>
        /// Loads the variable at a specific location onto the stack and returns it.
        /// </summary>
        /// <param name="returnVariableLocation">
        /// The location of the local variable to return.
        /// </param>
        void LoadReturnValue(int returnVariableLocation);

        /// <summary>
        /// Loads a string onto the stack.
        /// </summary>
        /// <param name="toLoad">
        /// The string to load.
        /// </param>
        void LoadString(string toLoad);

        /// <summary>
        /// Stores the top item on the stack in a specified local variable.
        /// </summary>
        /// <param name="location">
        /// The location to store the item at.
        /// </param>
        void StoreItemFromStack(int location);

        /// <summary>
        /// Calls ToString on a primitive at the top of the stack.
        /// </summary>
        /// <param name="type">
        /// The type of the primitive to call ToString on.
        /// </param>
        void ToStringPrimitiveValue(Type type);

        /// <summary>
        /// Calls TryParse on a string on top of the stack.
        /// </summary>
        /// <param name="type">
        /// The type of the primitive to TryParse into.
        /// </param>
        void TryParsePrimitiveValue(Type type);

        #endregion
    }
}